# https://docs.gitlab.com/ce/ci/yaml/README.html
# https://docs.gitlab.com/ce/ci/variables/README.html

.gradle:
  image: adoptopenjdk/openjdk11:alpine-slim
  variables:
    # https://gitlab.com/gitlab-org/gitlab-ci-yml/-/blob/master/Gradle.gitlab-ci.yml
    GRADLE_USER_HOME: "${CI_PROJECT_DIR}/.gradle"
    # Disable the Gradle daemon for Continuous Integration servers as correctness
    # is usually a priority over speed in CI environments. Using a fresh
    # runtime for each build is more reliable since the runtime is completely
    # isolated from any previous builds.
    GRADLE_OPTS: "-Dorg.gradle.daemon=false"
  cache:
    paths:
      - .gradle/wrapper
      - .gradle/caches

.maven:
  image: adoptopenjdk/openjdk11:alpine-slim
  variables:
    # https://gitlab.com/gitlab-org/gitlab-ci-yml/-/blob/master/Maven.gitlab-ci.yml
    # This will supress any download for dependencies and plugins or upload messages which would clutter the console log.
    # `showDateTime` will show the passed time in milliseconds. You need to specify `--batch-mode` to make this work.
    MAVEN_OPTS: "-Dhttps.protocols=TLSv1.2 -Dmaven.repo.local=${CI_PROJECT_DIR}/.m2/repository -Dorg.slf4j.simpleLogger.log.org.apache.maven.cli.transfer.Slf4jMavenTransferListener=WARN -Dorg.slf4j.simpleLogger.showDateTime=true -Djava.awt.headless=true"
    # As of Maven 3.3.0 instead of this you may define these options in `.mvn/maven.config` so the same config is used
    # when running from the command line.
    # `installAtEnd` and `deployAtEnd` are only effective with recent version of the corresponding plugins.
    MAVEN_CLI_OPTS: "--batch-mode --errors --fail-at-end --show-version -DinstallAtEnd=true -DdeployAtEnd=true"
    # Maven version
    MAVEN_VERSION: "3.6.3"
  cache:
    paths:
      - .m2/repository
  before_script:
    - mkdir -p "${CI_PROJECT_DIR}/.m2"
    - apk add --no-cache --upgrade ca-certificates
    - wget -O - "https://downloads.apache.org/maven/maven-${MAVEN_VERSION%%.*}/${MAVEN_VERSION}/binaries/apache-maven-${MAVEN_VERSION}-bin.tar.gz" | tar x -z -C "${CI_PROJECT_DIR}/.m2"
    - export PATH="${CI_PROJECT_DIR}/.m2/apache-maven-${MAVEN_VERSION}/bin:${PATH}"

.python:
  image: python:2-alpine
  variables:
    # https://gitlab.com/gitlab-org/gitlab-ci-yml/-/blob/master/Python.gitlab-ci.yml
    # Change pip's cache directory to be inside the project directory since we can
    # only cache local items.
    PIP_CACHE_DIR: "${CI_PROJECT_DIR}/.cache"
  cache:
    paths:
      - .cache/pip
  before_script:
    - pip install virtualenv
    - apk add --no-cache g++ make

.docker_image:
  image: docker:latest
  variables:
    # https://docs.gitlab.com/ce/ci/docker/using_docker_build.html#use-docker-in-docker-executor
    DOCKER_HOST: "tcp://docker:2375"
    # When using dind (docker-in-docker), it's wise to use the overlayfs driver for improved performance.
    DOCKER_DRIVER: "overlay2"
    # tag naming
    TAG_FINAL: "latest"
    TAG_PREFIX: "${CI_COMMIT_REF_NAME%master}"
  services:
    - docker:dind
  before_script:
    - echo "${CI_JOB_TOKEN}" | docker login --username gitlab-ci-token --password-stdin "${CI_REGISTRY}"
    - if [[ -n "${DOCKER_USERNAME}" ]]; then echo "${DOCKER_PASSWORD}" | docker login --username "${DOCKER_USERNAME}" --password-stdin docker.io; fi

stages:
  - build_deps
  - build
  - build_docker
  - release_docker

variables:
  # all submodules (including submodules of submodules) will be included, see https://docs.gitlab.com/ce/ci/yaml/README.html#git-submodule-strategy
  GIT_SUBMODULE_STRATEGY: "recursive"

build_deps:java_helpers:
  extends: .maven
  stage: build_deps
  script:
    - cd java-helpers
    - ./build-deps.sh
  artifacts:
    paths:
      - java-helpers/build/libs/*.jar

build:java_helpers:
  extends: .gradle
  stage: build
  dependencies:
    - build_deps:java_helpers
  script:
    - cd java-helpers
    - ./gradlew --build-cache build
  artifacts:
    paths:
      - java-helpers/build/libs/*.jar

build:python_site_packages:
  extends: .python
  stage: build
  script:
    - cd deployment
    - ./010-make-python-virtualenv.sh
    - apk add --no-cache p7zip
    - ./020-make-site-packages-zip.sh
  artifacts:
    paths:
      - deployment/build/*.zip

build_docker:webapp:
  extends: .docker_image
  stage: build_docker
  dependencies:
    - build:java_helpers
    - build:python_site_packages
  script:
    - cd deployment/docker
    - ./fetch-app.sh
    - ./build.sh --build=Dockerfile "${CI_REGISTRY_IMAGE}" "${TAG_FINAL}" "${TAG_PREFIX}"
    - ./build.sh --push "${CI_REGISTRY_IMAGE}" "${TAG_FINAL}" "${TAG_PREFIX}"

release_docker:webapp:
  extends: .docker_image
  stage: release_docker
  dependencies:
    - build_docker:webapp
  only:
    - master
  script:
    - cd deployment/docker
    - ./build.sh --pull "${CI_REGISTRY_IMAGE}" "${TAG_FINAL}" "${TAG_PREFIX}"
    - ./build.sh --tag "${CI_REGISTRY_IMAGE}${DOCKER_REPOS:+ ${DOCKER_REPOS}}${DOCKER_USERNAME:+ docker.io/${DOCKER_USERNAME}/${CI_PROJECT_NAME#docker-}}" "${TAG_FINAL}" "${TAG_PREFIX}"
    - ./build.sh --push "${CI_REGISTRY_IMAGE}${DOCKER_REPOS:+ ${DOCKER_REPOS}}${DOCKER_USERNAME:+ docker.io/${DOCKER_USERNAME}/${CI_PROJECT_NAME#docker-}}" "${TAG_FINAL}" "${TAG_PREFIX}"
